const {
    frontEndContractsFile,
    frontEndAbiFile,
    frontEndBytecode,
} = require("../helper-hardhat-config")
const fs = require("fs")
const path = require("path")
const { network } = require("hardhat")
const solc = require("solc")

const CHAIN_ID = "WINE CONSORTIUM"
const STEP = ["Grape Grower", "Wine Producer", "Bulk Distributor", "Filler-Packer", "Distributor"]

module.exports = async () => {
    if (process.env.UPDATE_FRONT_END) {
        console.log("Writing to front end...")
        await updateContractAddresses()
        await updateAbi()
        await updateContractBytecode()
        console.log("Front end written!")
    }
}

async function updateAbi() {
    const stepContract = await ethers.getContract("StepContract")
    fs.writeFileSync(frontEndAbiFile, stepContract.interface.format(ethers.utils.FormatTypes.json))
}

async function updateContractAddresses() {
    const contractAddresses = JSON.parse(fs.readFileSync(frontEndContractsFile, "utf8"))
    delete contractAddresses[network.config.chainId.toString()]
    for (let i = 0; i < 5; i++) {
        const stepContract = await ethers.getContract(STEP[i])
        if (network.config.chainId.toString() in contractAddresses) {
            if (
                !contractAddresses[network.config.chainId.toString()].includes(stepContract.address)
            ) {
                contractAddresses[network.config.chainId.toString()].push(stepContract.address)
            }
        } else {
            contractAddresses[network.config.chainId.toString()] = [stepContract.address]
        }
        fs.writeFileSync(frontEndContractsFile, JSON.stringify(contractAddresses))
    }
}

const thePath = path.resolve(__dirname, "../", "contracts", "StepContract.sol")
const source = fs.readFileSync(thePath, "utf-8")
async function updateContractBytecode() {
    var input = {
        language: "Solidity",
        sources: {
            "StepContract.sol": {
                content: source,
            },
        },
        settings: {
            outputSelection: {
                "*": {
                    "*": ["*"],
                },
            },
        },
    }

    const output = JSON.parse(solc.compile(JSON.stringify(input)))
    const bytecode = output.contracts["StepContract.sol"].StepContract.evm.bytecode.object

    fs.writeFileSync(frontEndBytecode, JSON.stringify(bytecode))
}
module.exports.tags = ["all", "frontend"]
